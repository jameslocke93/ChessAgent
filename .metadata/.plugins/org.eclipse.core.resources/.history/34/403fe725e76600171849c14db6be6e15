package chessAgentV1;

import static org.junit.Assert.*;

import java.util.ArrayList;
import java.util.Collections;

import org.junit.Test;

public class TestRules {
	
	private ChessGame testGame = new ChessGame();
	
	@Test
	public void castle4to0(){
		int[] board = new int[] 
				{4,0,0,0,7,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0};
		
		int[] expectedBoard = new int[] 
				{0,0,7,4,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,};
		testGame.setupBoard();
		testGame.setBoard(board);
		testGame.setPlayer(ChessGame.WHITE_PLAYER);
		assertTrue(testGame.moveCheck(4, 0));
		
		assertArrayEquals(expectedBoard, testGame.getBoard());
	}
	
	@Test
	public void castle4to7(){
		int[] board = new int[] 
				{0,0,0,0,7,0,0,4,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0};
		
		int[] expectedBoard = new int[] 
				{0,0,0,0,0,4,7,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,};
		testGame.setupBoard();
		testGame.setBoard(board);
		testGame.setPlayer(ChessGame.WHITE_PLAYER);
		assertTrue(testGame.moveCheck(4, 7));
		
		assertArrayEquals(expectedBoard, testGame.getBoard());
	}
	
	@Test
	public void castle60to56(){
		int[] board = new int[] 
				{0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 10,0,0,0,13,0,0,0};
		
		int[] expectedBoard = new int[] 
				{0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,13,10,0,0,0,0,};
		testGame.setupBoard();
		testGame.setBoard(board);
		testGame.setPlayer(ChessGame.BLACK_PLAYER);
		assertTrue(testGame.moveCheck(60, 56));
		
		assertArrayEquals(expectedBoard, testGame.getBoard());
	}
	
	@Test
	public void castle60to63(){
		int[] board = new int[] 
				{0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,13,0,0,10};
		
		int[] expectedBoard = new int[] 
				{0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,10,13,0,};
		testGame.setupBoard();
		testGame.setBoard(board);
		testGame.setPlayer(ChessGame.BLACK_PLAYER);
		assertTrue(testGame.moveCheck(60, 63));
		
		assertArrayEquals(expectedBoard, testGame.getBoard());
	}
	
	@Test
	public void castleIllegal(){
		int[] board = new int[] 
				{0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,7,0,0,4,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0};
		
		int[] expectedBoard = new int[] 
				{0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,7,0,0,4,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,};
		testGame.setupBoard();
		testGame.setBoard(board);
		testGame.setPlayer(ChessGame.WHITE_PLAYER);
		assertFalse(testGame.moveCheck(20, 23));
		
		assertArrayEquals(expectedBoard, testGame.getBoard());
	}
	
	@Test
	public void castle4blocked0(){
		int[] board = new int[] 
				{4,0,8,0,7,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0};
		
		int[] expectedBoard = new int[] 
				{4,0,8,0,7,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,};
		testGame.setupBoard();
		testGame.setBoard(board);
		testGame.setPlayer(ChessGame.WHITE_PLAYER);
		assertFalse(testGame.moveCheck(4, 0));
		
		assertArrayEquals(expectedBoard, testGame.getBoard());
	}
	
	@Test
	public void castle4blocked7(){
		int[] board = new int[] 
				{0,0,0,0,7,8,0,4,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0};
		
		int[] expectedBoard = new int[] 
				{0,0,0,0,7,8,0,4,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,};
		testGame.setupBoard();
		testGame.setBoard(board);
		testGame.setPlayer(ChessGame.WHITE_PLAYER);
		assertFalse(testGame.moveCheck(4, 7));
		
		assertArrayEquals(expectedBoard, testGame.getBoard());
	}
	
	@Test
	public void castle60blocked56(){
		int[] board = new int[] 
				{0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 10,0,12,0,13,0,0,0,};
		
		int[] expectedBoard = new int[] 
				{0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 10,0,12,0,13,0,0,0,};
		testGame.setupBoard();
		testGame.setBoard(board);
		testGame.setPlayer(ChessGame.WHITE_PLAYER);
		assertFalse(testGame.moveCheck(60, 56));
		
		assertArrayEquals(expectedBoard, testGame.getBoard());
	}
	
	@Test
	public void castle60blocked63(){
		int[] board = new int[] 
				{0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,13,12,0,10,};
		
		int[] expectedBoard = new int[] 
				{0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,13,12,0,10,};
		testGame.setupBoard();
		testGame.setBoard(board);
		testGame.setPlayer(ChessGame.WHITE_PLAYER);
		assertFalse(testGame.moveCheck(60, 63));
		
		assertArrayEquals(expectedBoard, testGame.getBoard());
	}
	
	@Test
	public void enPassant33to40(){
		int[] board = new int[] 
				{0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,3,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 9,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,};
		
		int[] expectedBoard = new int[] 
				{0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 3,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,};
		testGame.setupBoard();
		testGame.setBoard(board);
		testGame.setPlayer(ChessGame.BLACK_PLAYER);
		assertTrue(testGame.moveCheck(48, 32));
		testGame.setPlayer(ChessGame.WHITE_PLAYER);
		assertTrue(testGame.moveCheck(33, 40));
		
		assertArrayEquals(expectedBoard, testGame.getBoard());
	}
	
	@Test
	public void enPassant24to17(){
		int[] board = new int[] 
				{0,0,0,0,0,0,0,0,
				 0,3,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 9,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,};
		
		int[] expectedBoard = new int[] 
				{0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,9,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,};
		testGame.setupBoard();
		testGame.setBoard(board);
		testGame.setPlayer(ChessGame.WHITE_PLAYER);
		assertTrue(testGame.moveCheck(9, 25));
		testGame.setPlayer(ChessGame.BLACK_PLAYER);
		assertTrue(testGame.moveCheck(24, 17));
		
		assertArrayEquals(expectedBoard, testGame.getBoard());
	}
	
	@Test
	public void enPassantFail33to40(){
		int[] board = new int[] 
				{0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,3,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 9,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,};
		
		int[] expectedBoard = new int[] 
				{0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 9,3,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,};
		testGame.setupBoard();
		testGame.setBoard(board);
		testGame.setPlayer(ChessGame.BLACK_PLAYER);
		assertTrue(testGame.moveCheck(48, 32));
		testGame.setTurncounter(10);
		testGame.setPlayer(ChessGame.WHITE_PLAYER);
		assertFalse(testGame.moveCheck(33, 40));
		
		assertArrayEquals(expectedBoard, testGame.getBoard());
	}
	
	@Test
	public void enPassantFail24to17(){
		int[] board = new int[] 
				{0,0,0,0,0,0,0,0,
				 0,3,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 9,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,};
		
		int[] expectedBoard = new int[] 
				{0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 9,3,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,};
		testGame.setupBoard();
		testGame.setBoard(board);
		testGame.setPlayer(ChessGame.WHITE_PLAYER);
		assertTrue(testGame.moveCheck(9, 25));
		testGame.setTurncounter(10);
		testGame.setPlayer(ChessGame.BLACK_PLAYER);
		assertFalse(testGame.moveCheck(24, 17));
		
		assertArrayEquals(expectedBoard, testGame.getBoard());
	}
	
	@Test
	public void pawnPromote(){
		int[] board = new int[] 
				{0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,3,0,0,0,0,0,};
		
		int[] expectedBoard = new int[] 
				{0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,8,0,0,0,0,0,};
		testGame.setupBoard();
		testGame.setBoard(board);
		testGame.pawnPromote(58, ChessGame.WHITE_QUEEN);
		
		assertArrayEquals(expectedBoard, testGame.getBoard());
	}
	
	@Test
	public void pawnMoveList(){
		int[] board = new int[] 
				{0,0,0,0,0,0,0,0,
				 0,0,3,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,
				 0,0,0,0,0,0,0,0,};
		
		//ArrayList<Move> moveList = new ArrayList<Move>();
		
		testGame.setupBoard();
		testGame.setBoard(board);
		testGame.moveList(testGame);
		//Collections.copy(moveList, testGame.moveList(testGame));
		
		//System.out.println(moveList.size());
	}
}
